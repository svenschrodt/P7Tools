<?php

/**
     * Returning file path for current OS
     *
     * @param array $data
     * @return string
     */
    public static function getFilePathFromParts(array $data)
    {
        return implode(DIRECTORY_SEPARATOR, $data);
    }

// echo Helper::getInfo($_SERVER, false, true);

/**
 * Building (singleton) instance of router
 */

// @todo make it configurable !!
define('APP_NS', 'TestAppSven');

// $app = new \P7Tools\Mvc\Application(APP_NS);
// try {$app->run();
// } catch (\Exception $e) {
// echo $e->getMessage();
// }
// $dbh = new \P7Tools\Database\MySqlAdapter();
// var_dump($dbh);

// $cfg = \P7Tools\Base\File\Config::getConfig('db');
// var_dump($cfg);


echo '<pre>';
$dbh = \P7Tools\Database\MySqlAdapter::getInstance();
$dbh->query('DESCRIBE ikr');
$dta = $dbh->fetch();
echo Helper::getInfo($dta);

// print_r(\P7Tools\Meta::getEnvironment());

// $foo = new \P7Tools\Tools\SourceTemplate();
// echo $foo->getAutoLoaderSource('Minz', '/home/sven/application/Minz');

// $data = [
//     'license' => 'CopyLeft reversed!Ford!',
//     'package' => 'Minz',
//     'author' => 'sven',
//     'see' => 'http:://example.org/foo.php',
//     'since' => '1970-12-09',
//     'param' => [
//         'string $foo',
//         'int $bar',
//         'array $multi',
//         'stdClass results',
       
//     ],
//     'return' => 'array $foo'
// ];
// $idt = '    ';
// $foo = new \P7Tools\Tools\DocBlockMaker();

// $foo->addTags(['todo' => 'Adding validation of user input', 'fixme' => 'Repairing character encoding']);

// echo $foo->getStartBlock($idt) . PHP_EOL ;
// echo $foo->getTagList($data, $idt). PHP_EOL ;
// echo $foo->getEndBlock($idt) . PHP_EOL ;
 
 
;
// var_dump();
// $myR = \P7Tools\Mvc\Router::getInstance();
//  var_dump($myR);
//  $cfg = \P7Tools\Base\File\Config::getConfig();
//  var_dump($cfg);
//  $file = file('html5_elements.txt');
//  var_dump($file);
//  echo '<pre>';
//  foreach($file as $line) {
//      $tmp= explode('  ', $line);
//      $ele = trim($tmp[3]);
//     echo "'{$ele}', ";
// // die;
//  }
?>


<?php declare(strict_types=1);
//DEFINE('INTEGER_LENGTH',31); // Stupid signed bit.
namespace P7Tools\Base\Data;

/**
 * deprecated st version 
*/

class BitMask
{

    const INTEGER_LENGTH = 31;
    protected $_mask = array();

    public function set( $bit ) // Set some bit
    {
        $key = (int) ($bit / self::INTEGER_LENGTH);
        $bit = (int) fmod($bit, self::INTEGER_LENGTH);
        $this->_mask[$key] |= 1 << $bit;
        var_dump(array('key'=>$key, 'bit'=>$bit));die;
    }

    public function remove( $bit ) // Remove some bit
    {
        $key = (int) ($bit / self::INTEGER_LENGTH);
        $bit = (int) fmod($bit,self::INTEGER_LENGTH);
        $this->_mask[$key] &= ~ (1 << $bit);
        if(!$this->_mask[$key])
            unset($this->_mask[$key]);
    }

    public function toggle( $bit ) // Toggle some bit
    {
        $key = (int) ($bit / self::INTEGER_LENGTH);
        $bit = (int) fmod($bit,self::INTEGER_LENGTH);
        $this->_mask[$key] ^= 1 << $bit;
        if(!$this->_mask[$key])
            unset($this->_mask[$key]);
    }

    public function read( $bit ) // Read some bit
    {
        $key = (int) ($bit / self::INTEGER_LENGTH);
        $bit = (int) fmod($bit,self::INTEGER_LENGTH);
        return $this->_mask[$key] & (1 << $bit);
    }

    public function stringin($string) // Read a string of bits that can be up to the maximum amount of bits long.
    {
        $this->_mask = array();
        $array = str_split( strrev($string), self::INTEGER_LENGTH );
        foreach( $array as $key => $value )
        {
            if($value = bindec(strrev($value)))
                $this->_mask[$key] = $value;
        }
    }

    public function __toString() // Print out a string of your nice little bits
    {
        $string = "";

        $keys = array_keys($this->_mask);
        sort($keys, SORT_NUMERIC);

        for($i = array_pop($keys);$i >= 0;$i--)
        {
            if($this->_mask[$i])
                $string .= sprintf("%0" . self::INTEGER_LENGTH . "b",$this->_mask[$i]);
        }
        return $string;
    }

    public function clear() // Purge!
    {
        $this->_mask = array();
    }

    public function debug() // See what's going on in your bitmask array
    {
        var_dump($this->_mask);
    }
}
?>


        // TODO remove this after finishing development of P7Tools
        // @codeCoverageIgnoreStart
        if(\P7Tools\Mvc\Application::$showDebugInfo) {
            echo "$type called for $key";
            if (isset($argument)) {
                echo " with argument: '$argument'(" . gettype($argument) . ")";
            }
            echo "\n";
        }
        // @codeCoverageIgnoreEnd

